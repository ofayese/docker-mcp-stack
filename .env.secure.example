# Docker MCP Stack - Secure Environment Variables Template
# Copy this file to .env and customize with your secure values
# DO NOT commit .env file to version control

#
# SECURITY NOTICE
# ===============
# This file contains sensitive configuration values.
# Ensure strong, unique passwords and tokens for production use.
# Consider using external secret management systems for production.
#

#
# HEALTH CHECK SETTINGS
# Global health check configuration for all services
#

# Health check intervals (format: 30s, 1m, 2m, etc.)
HEALTHCHECK_INTERVAL=30s
HEALTHCHECK_TIMEOUT=10s
HEALTHCHECK_RETRIES=3

#
# LOGGING CONFIGURATION
# Global logging settings for all services
#

# Log file size and rotation
LOG_MAX_SIZE=10m
LOG_MAX_FILES=3

#
# MODEL RUNNER SETTINGS
#

# Model ports (mapped to host)
SMOLLM2_PORT=12434
LLAMA3_PORT=12435
PHI4_PORT=12436
QWEN3_PORT=12437
QWEN2_PORT=12438
MISTRAL_PORT=12439
GEMMA3_PORT=12440
GRANITE7_PORT=12441
GRANITE3_PORT=12442

# GPU settings (comma-separated list of GPU indices to use)
CUDA_DEVICES=0

# Resource limits for model runners
MODEL_MEMORY_LIMIT=4g
MODEL_CPU_LIMIT=2

#
# MCP SERVER SETTINGS
#

# GitHub integration (create token at https://github.com/settings/tokens)
# Required scopes: repo, read:org
GITHUB_TOKEN=ghp_your_secure_github_token_here

# GitLab integration (create token at https://gitlab.com/-/profile/personal_access_tokens)
# Required scopes: read_api, read_repository
GITLAB_TOKEN=glpat_your_secure_gitlab_token_here

# Sentry integration (get DSN from your Sentry project settings)
# Used for error tracking and monitoring
SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id

#
# DATABASE SETTINGS
#

# PostgreSQL connection details
POSTGRES_DB=mcp_production
POSTGRES_USER=mcp_admin
# SECURITY: Use a strong password (min 12 chars, mixed case, numbers, symbols)
POSTGRES_PASSWORD=mcp_secure_password_2024!
POSTGRES_PORT=5432
POSTGRES_CONNECTION_STRING=postgresql://mcp_admin:mcp_secure_password_2024!@postgres:5432/mcp_production

#
# WEB SERVER SETTINGS
#

# Nginx ports
NGINX_HTTP_PORT=80
NGINX_HTTPS_PORT=443

# SSL/TLS Configuration
SSL_ENABLED=false
DOMAIN_NAME=localhost
EMAIL=admin@localhost

# Security headers
ENABLE_SECURITY_HEADERS=true
HSTS_MAX_AGE=31536000

#
# MONITORING SETTINGS
#

# Prometheus
PROMETHEUS_PORT=9090
PROMETHEUS_RETENTION_TIME=15d

# Grafana credentials
GRAFANA_PORT=3000
# SECURITY: Change default admin credentials
GRAFANA_ADMIN_USER=admin
GRAFANA_ADMIN_PASSWORD=secure_grafana_password_2024!

#
# BACKUP SETTINGS
#

# Backup configuration
BACKUP_ENABLED=true
BACKUP_RETENTION_DAYS=30
BACKUP_ENCRYPTION_ENABLED=false
BACKUP_ENCRYPTION_KEY=your_encryption_key_here

# Backup schedule (cron format)
BACKUP_SCHEDULE_FULL="0 2 * * 0"     # Weekly on Sunday at 2 AM
BACKUP_SCHEDULE_INCREMENTAL="0 3 * * 1-6"  # Daily except Sunday at 3 AM

#
# DOCKER HUB AUTHENTICATION
#

# Docker Hub credentials (for private images or rate limit avoidance)
DOCKER_HUB_USERNAME=your_dockerhub_username
DOCKER_HUB_TOKEN=your_dockerhub_access_token

#
# DEVELOPMENT SETTINGS
#

# Environment type (development, staging, production)
ENVIRONMENT=development

# Debug mode
DEBUG_MODE=false

# Log level (debug, info, warn, error)
LOG_LEVEL=info

#
# ADVANCED SETTINGS
#

# Network configuration
NETWORK_SUBNET=172.20.0.0/16

# Health check intervals
HEALTH_CHECK_INTERVAL=30s
HEALTH_CHECK_TIMEOUT=10s
HEALTH_CHECK_RETRIES=3

# API rate limiting
API_RATE_LIMIT_ENABLED=true
API_RATE_LIMIT_REQUESTS=100
API_RATE_LIMIT_WINDOW=3600  # 1 hour in seconds
